<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--Imixs IX XML QueyObject  -  www.imixs.com--><query>
  <itemcollection>
    <itemcollection>
      <item name="txtworkflowmanageruri">
        <value>http://localhost:8080/office-rest/report</value>
      </item>
      <item name="txtattributelist">
        <value>datdate&lt;format&gt;dd&lt;/format&gt;</value>
        <value>_subject</value>
        <value>_category</value>
        <value>_duration</value>
        <value>namCreator</value>
        <value>txtWorkflowStatus</value>
      </item>
      <item name="txtquery">
        <value>SELECT workitem FROM Entity AS workitem&#13;
 JOIN workitem.textItems AS type2
 JOIN workitem.calendarItems AS type3&#13;
  WHERE workitem.type IN ('childworkitem')&#13;
  AND type3.itemName = 'datdate' &#13;
  AND type3.itemValue   BETWEEN '&lt;date DAY_OF_MONTH="1" /&gt;' 
                            AND  '&lt;date DAY_OF_MONTH="ACTUAL_MAXIMUM" /&gt;' 
  AND type2.itemName = 'txtworkflowgroup' &#13;
  AND type2.itemValue = 'Zeiterfassung'&#13;
ORDER BY type3.itemValue ASC</value>
      </item>
      <item name="txtcontenttype">
        <value>application/json</value>
      </item>
      <item name="txtencoding">
        <value>UTF-8</value>
      </item>
      <item name="txtname">
        <value>04_projekt_stunden.ixr</value>
      </item>
      <item name="txtxsl">
        <value>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;xsl:stylesheet xmlns="http://www.w3.org/1999/xhtml"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
	&lt;xsl:output method="text" indent="no" encoding="ISO-8859-1" 
		omit-xml-declaration="yes" /&gt;
	&lt;xsl:strip-space elements="*" /&gt;

	&lt;xsl:key name="groups" match="/collection/entity"
		use="item[name='datdate']/value" /&gt;

	&lt;xsl:template match="/"&gt;
		{
			"labels" : [
						&lt;!--Select the first element of each group --&gt;
						&lt;xsl:for-each select="/collection/entity[generate-id() =generate-id(key('groups', item[name='datdate']/value)[1])]" &gt;
							&lt;xsl:sort select="item[name='datdate']/value" data-type="text" order="ascending"/&gt;
							&lt;xsl:text&gt;&lt;![CDATA["]]&gt;&lt;/xsl:text&gt;&lt;xsl:value-of select="item[name='datdate']/value" /&gt;&lt;xsl:text&gt;&lt;![CDATA["]]&gt;&lt;/xsl:text&gt;
							&lt;!-- comma separator only if not last one --&gt;
							&lt;xsl:if test="position() != last()" &gt;&lt;xsl:text&gt;&lt;![CDATA[,]]&gt;&lt;/xsl:text&gt;&lt;/xsl:if&gt;
						&lt;/xsl:for-each&gt;
					 ],
			"datasets" : [
			{
				"label": "Erbrachte Stunden",
				"fillColor" : "rgba(220,220,220,0.2)",
				"strokeColor" : "rgba(220,220,220,1)",
				"pointColor" : "rgba(220,220,220,1)",
				"pointStrokeColor" : "#fff",
				"pointHighlightFill" : "#fff",
				"pointHighlightStroke" : "rgba(220,220,220,1)",
				"data" : [
			&lt;xsl:apply-templates
					select="/collection/entity[generate-id() = generate-id(key('groups', item[name='datdate']/value)[1])]" &gt;
					&lt;!-- sort --&gt;
					&lt;xsl:sort select="item[name='datdate']/value" data-type="text" order="ascending"/&gt;
			&lt;/xsl:apply-templates&gt;
				]
			}
			]
		}
	&lt;/xsl:template&gt;


	&lt;!-- This template builds a JSON array with sum of '_amount' over all groups --&gt;
	&lt;xsl:template match="/collection/entity"&gt;
	
		
		&lt;!-- build sum variable --&gt;
		&lt;xsl:variable name="summe"
			select="sum(key('groups', item[name='datdate']/value)//item[name='_duration']/value)"/&gt;
			
			&lt;!-- output sum  --&gt;
			&lt;xsl:choose&gt;
 			  &lt;!-- test if NaN --&gt;
			  &lt;xsl:when test="not(number($summe))"&gt;
			      &lt;!-- myNode is a not a number or empty(NaN) or zero --&gt;  
			      &lt;xsl:text&gt;&lt;![CDATA[0]]&gt;&lt;/xsl:text&gt;   
			  &lt;/xsl:when&gt;
			  &lt;xsl:otherwise&gt;
			      &lt;!-- myNode is a number (!= zero) --&gt;     
			      &lt;xsl:value-of select="$summe" /&gt;   
			  &lt;/xsl:otherwise&gt;
			&lt;/xsl:choose&gt;
			&lt;!-- comma separator only if not last one --&gt;
			&lt;xsl:if test="position() != last()" &gt;&lt;xsl:text&gt;&lt;![CDATA[,]]&gt;&lt;/xsl:text&gt;&lt;/xsl:if&gt;
	&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</value>
      </item>
    </itemcollection>
  </itemcollection>
</query>
